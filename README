This readme will cover how to generate figure 4. We will also cover how to generate the intermediary data consumed by this script.

Generating Figure 4:
    1) Optionally create a python virtual environment to install the necessary python packages: python -m venv <PATH/TO/VIRTUAL/ENVIRONMENT>
        a) Start your virtual environment: source <PATH/TO/VIRTUAL/ENVIRONMENT>/bin/activate
    2) Install required python packages: pip install -r requirements.txt
        a) Also install jupyter if you don't have it. *Note older version of jupyter may require you to manually enable ipywidgets, see: https://ipywidgets.readthedocs.io/en/8.1.3/user_install.html
    3) Start up a Jupyter notebook: jupyter notebook
    4) Run all cells of the generate_figure_4.ipynb
    5) NOTE: 
        a) One discrepency from the figure presented inthe published paper. For the Extreme Right Bias / Fake News subfigure, the fourth user down, other_2016, erroneously had a circle icon (indicating the user was linked to the media) instead of a triagle (indicating the user was other). This was caused by the manual steps necessary to produce the figure initially. 
        The original figure first generated 3 sankey diagrams. Then, these were each merged into one svg file and icons, rankd bounding boxes, and legends were added by hand. This resulted in the wrong icon being used. The code presented here generates the figure programatically, therefore lacks the error.

Note:
The script will need to be pointed at where the required data files are, by default it expects them in ../data/maps, ../data/influencers, ../data/affilliations


Generating Figure 5:
    1) analyze_retweet_networks.py
        a) Run for years 2016 and 2020 by setting the 'year' variable to either '2016' or '2020'. 
        b) point USER_MAPS_<year> variables to the output of the "Generate User Mappings" step in the provided guide on generating intermediary files from raw data provided at the end of this document
        c) point the network_dir variable to the output of the "Compute Collective Influence" step in the provided guide on generating intermediary files from raw data provided at the end of this document

    2) draw_combined_retweet_graphs.py
        a) Run for 2016 and 2020 by setting year variable.
        b) point save_dir to where the outputs from analyze_retweet_networks live and point network_dir to where the outputs of compute_CI_retweet_networks live.
        /urls/<year>/influencer_rankings_<year>.pickle, /graphs/<year>/<bias>_

    3) get_top_100_unweighted_influencers.py
        a) Run for year = 2016 and year = 2020 (in script)
        b) set target_dir to point towards your <bias>_<year>_ci.gt graphs, generated by Collective_Influence compute_CI_retweet_networks.py

    4) get_similarity_matrix_2016.py
        a) point influencer_dir to the directory containing the top_100 influencer pickle files generated in the previous step.
        b) point raw_retweets_2016 to the 2016 election data sqlite database.
        c) modify the save_dir
        
    5) get_similarity_matrix_2020.py
        a) point influencer_dir to the directory containing the top_100 influencer pickle files generated in the previous step.
        b) point raw_retweets_2016 to the 2016 election data sqlite database.
        c) modify the save_dir

    6) plot_figure_5_2016.py
        a) point SIM_NETWORK_PATH to the similarity network created in get_similarity_matrix_2016.py
        b) point RETWEET_GRAPH_JSON_PATH to the json file created by the draw_combined_retweet_graphs.py method in step 2.
        c) modify the SAVE_DIR to where you want the output

    7) plot_figure_5_2020.py
        a) point SIM_NETWORK_PATH to the similarity network created in get_similarity_matrix_2020.py 
        b) point RETWEET_GRAPH_JSON_PATH to the json file created by the draw_combined_retweet_graphs.py method in step 2.
        c) modify the SAVE_DIR to where you want the output

    8) merge_finish_figure_5.py
        a) point this script to the generated pdfs of the previous step

    9) NOTES: 
        a) This figure contains one discrepency from the one in the published paper. In the 2020 Right Leaning top 5 influencers table, the 3rd rank user Polit_both^1,1 has a purple (12) to the left in the figure presented in the paper, while the figure generated here does not. The figure generated by this script is correct, as it automatically makes the top influencer tables, instead of doing so manually.

        The figure generated in the paper originally had a manual step where the two similarity network pdfs were merged into one figure and the top influencer tables added by hand. When adding the tables there was an error where the (12) was added to right leaning influencer 3. This likely occurred because this same user had (12) in the extreme bias right category.



Generating Figure 3:
    Note: Figure 3 related scripts are located in the Figure_3 directory
    1) Run analyze_answers.py
        a) point the user_data variable to the directory containing link_map.pkl (check Generate User Mapings below)
        b) point the influencer_data variable to the output of get_top_100_unweighted_influencers.py
        c) point the infl_classification_surveys variable to the survey_0.xlsx - survey_8.xlsx provided in the Influencers_Classification data directory in osf. 
    


#####################################################################
#####################################################################


Generating from raw data:
This section covers how to generate, from raw data, the data files used by this script.

Install required packages
    1) pip install -r requirements.txt
    2) apt-get install python3-graph-tool

To generate the intermediary files:

    1) Generate retweet network:
        Note: these scripts live in the Retweet_network folder in the OSF repository.
        a) Run generate_retweet_networks.py 
            i) NOTE you need to modify the constants in the script to point to the raw twitter data on your machine. There are also variables on how many threads to use that 
               you may want to tune to your machine. 16 or 32 workers should be fine.
           ii) You will likely need to point the WORKING_DIR variable to a directory with > 50GB
               of disk space. The final step of merging retweet and tweet edges requires the workers have adequet disk space.
          iii) Previously generated versions of these files exist in the Retweet_Network folder of the OSF data repository.
        
        Output: This code will generate the url classified edgelists of the retweet network, for use in CI calculations. Thes files are called: <bias>_retweet_edges.csv, there is one for each bias.
        NOTE: We apply anonymization after this step, produced retweet edges and tweet ids are all anonymized.


    2) Compute Collective Influence:
        Note: these scripts live in the Collective_Influence folder in the OSF repository.
        a) Run setup.py
        b) Run generate_graphs.py
            i) Be sure to set the base_path variable in this script to point at the retweet network edges files generated in step 1.
        c) Run compute_CI_retweet_networks.py
            i) this needs to be run once for each graph generated in the previous step. also expects ../data/ci_output/<graph|output>/2020 directories.
        
        Output: This will produce the <bias>_<year>_ci.gt files used to compute the top_influencer_<bias>.csv files used to make figure 4.


    3) Generate User Mappings:
        Note: the script needed here is the Similarity Matrix folder
        a) Run assemble_user_maps.py
            i) You will need to set target_dir in this script to point at the raw 2020 users.csv files.

        Output: After running this script you will have generated the user_map_2016.pkl and user_map_2020.pkl files.


    4) Find the Top Influencers:
        Note the script you need is in the Retweet_Network directory of the provided code.
        a) Run elites_network_analysis.py
            i) note: adds user handle to output, instead make a map of the new id we create to user handle / anonymized user handle and store that file.
        
        b) get_top_100_unweighted_influencers.py
            i) Run for year = 2016 and year = 2020 (in script)
           ii) set target_dir to point towards your <bias>_<year>_ci.gt graphs, generated by Collective_Influence compute_CI_retweet_networks.py

        Output: This will generate several files, but the ones we are concerned with are the top_influencers_<bias>.csv files and the top_100 unweighted influencer files


    5) Generate User Mappings
        Note, this will generate a mapping between twitter user_id and twitter handle, as well as map each user to a media affiliation.
        
        a) get_raw_user_profiles.py
            i) point INFLUENCER_DIR to the location of the top_100 influencer files generated in the previous step
           ii) As an argument to the script you provide a path to a file. The file should be one of the raw tweet files called 202001.lj - 202011.lj  
        
            Output: <202001 - 202011>_user_profiles.pkl

        b) create_user_profile_survey.py
            i) point INFLUENCER_DIR to the location of the top_100 influencer files  
           ii) point USER_PROFILE_DIR to the location of the user profiles created by get_raw_user_profiles.py
          
            Output: link_map.pkl, survey.tsv

        c) get_infl_affiliations.py
            i) point INFLUENCER_DIR and USER_PROFILE_DIR to the correct directories, as done in the previous step
           ii) point ANSWER_DIR to the survey answers in the OSF data repository
          iii) point MAPS_DIR to the location that the link_map.pkl was generated
        
            Output: infl_affiliation_map_no_handles.json, infl_affiliation_map_no_handles.pkl


Notes:
    1) Since we never provided any requirements.txt it is hard to say which versions of packages were used. I managed to get the code working and have provided all necessary packages in the requirements txt
        i) any additional packages (like graph-tool) that may need to be instaalled in other ways are also listed with the target version